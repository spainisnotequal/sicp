;; ================================================ ;;
;; Chapter 1: Building Abstractions with Procedures ;;
;; ================================================ ;;

;; ---------------------------------------- ;;
;; Section 1.1: The Elements of Programming ;;
;; ---------------------------------------- ;;

(define pi 3.14)
(define r 10)
(define circumference (* 2 pi r))


;; Compound procedures

(define (square x)
  (* x x))

(define (sum-of-squares x y)
  (+ (square x) (square y)))

(define (f a)
  (sum-of-squares (+ a 1) (* a 2)))


;; Absolute value

(define (abs1 x)
  (cond
   ((> x 0) x)
   ((= x 0) 0)
   ((< x 0) (- x))))

(define (abs2 x)
  (cond
   ((< x 0) (- x))
   (else x)))

(define (abs3 x)
  (if (< x 0)
      (- x)
      x))


;; Square roots by Newton's method

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (sqrt x)
  (sqrt-iter 1.0 x))


;; ------------------------------------------------------- ;;
;; Section 1.2: Procedures and the Processes They Generate ;;
;; ------------------------------------------------------- ;;


;; (Don't confuse the notion of a "recursive process" with the notion of a "recursive procedure").


;; EXAMPLE: FACTORIAL
;; ------------------

;; "Linear Recursive Process" generated by a "Recursive Procedure"

(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))

;; "Linear Iterative Process" generated by a "Recursive Procedure"

(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (> counter max-count)
      product
      (fact-iter (* counter product)
		 (+ counter 1)
		 max-count)))


;; EXAMPLE: FIBONACCI
;; ------------------

;; "Tree Recursive Process" generated by a "Recursive Procedure"

(define (fib n)
  (cond ((= n 0) 0)
	((= n 1) 1)
	(else (+ (fib (- n 1))
		 (fib (- n 2))))))

;; "Linear Iterative Process" generated by a "Recursive Procedure"

(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))


;; EXAMPLE: COUNTING CHANGE
;; ------------------------

(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
	((or (< amount 0) (= kinds-of-coins 0)) 0)
	(else (+ (cc amount
		     (- kinds-of-coins 1))
		 (cc (- amount (first-denomination kinds-of-coins))
		     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
	((= kinds-of-coins 2) 5)
	((= kinds-of-coins 3) 10)
	((= kinds-of-coins 4) 25)
	((= kinds-of-coins 5) 50)))

(count-change 100)


;; EXAMPLE: EXPONENTIATION
;; -----------------------

;; Linear Recursive Process

(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))


;;Linear Iterative Process

(define (expt b n)
  (expt-iter b n 1))

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
		 (- counter 1)
		 (* b product))))

;; Logarithmic Recursive Process

(define (fast-expt b n)
  (cond ((= n 0) 1)
	((even? n) (square (fast-expt b (/ n 2))))
	(else (* b (fast-expt b (- n 1))))))


(expt 2 3) ; 8
(expt 3 3) ; 27
(expt 3 5) ; 243

(fast-expt 2 3) ; 8
(fast-expt 3 3) ; 27
(fast-expt 3 5) ; 243


;; EXAMPLE: PRIME NUMBERS
;; ----------------------

;; First method: Searching for divisors

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
	((divides? test-divisor n) test-divisor)
	(else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

(prime? 3)
(prime? 4)
(prime? 7)
(prime? 8)

;; Second method: The Fermat test (probabilistic method)

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(fast-prime? 3 10)
(fast-prime? 4 10)
(fast-prime? 7 10)
(fast-prime? 8 10)
